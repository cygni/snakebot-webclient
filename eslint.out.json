[
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/App.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/common/gamecomponents/Tile.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/common/templates/footer/PageFooter.jsx",
        "messages": [
            {
                "column": 19,
                "line": 13,
                "message": "Unexpected require().",
                "nodeType": "CallExpression",
                "ruleId": "global-require",
                "severity": 2,
                "source": "        <img src={require('../../../design/images/cygni-logo.png')} alt=\"Cygni-logo\" />"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 4,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/common/templates/header/PageHeader.jsx",
        "messages": [
            {
                "column": 2,
                "fix": {
                    "range": [
                        551,
                        551
                    ],
                    "text": " "
                },
                "line": 22,
                "message": "Expected indentation of 2 space characters but found 1.",
                "nodeType": "MethodDefinition",
                "ruleId": "indent",
                "severity": 2,
                "source": " render() {"
            },
            {
                "column": 2,
                "line": 22,
                "message": "render should be placed after tryLogout",
                "nodeType": "MethodDefinition",
                "ruleId": "react/sort-comp",
                "severity": 2,
                "source": " render() {"
            },
            {
                "column": 8,
                "line": 22,
                "message": "Expected 'this' to be used by class method 'render'.",
                "nodeType": "FunctionExpression",
                "ruleId": "class-methods-use-this",
                "severity": 1,
                "source": " render() {"
            },
            {
                "column": 5,
                "fix": {
                    "range": [
                        565,
                        566
                    ],
                    "text": ""
                },
                "line": 23,
                "message": "Expected indentation of 3 space characters but found 4.",
                "nodeType": "ReturnStatement",
                "ruleId": "indent",
                "severity": 2,
                "source": "    return ("
            },
            {
                "column": 3,
                "fix": {
                    "range": [
                        1449,
                        1450
                    ],
                    "text": ""
                },
                "line": 51,
                "message": "Expected indentation of 1 space character but found 2.",
                "nodeType": "BlockStatement",
                "ruleId": "indent",
                "severity": 2,
                "source": "  }"
            }
        ],
        "warningCount": 1
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/common/templates/PageTemplate.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/config/Routes.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/pages/AboutPage.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/pages/GettingStartedPage.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/pages/HomePage.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/pages/StatusPage.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/security/components/AuthPage.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/security/components/LoginPage.jsx",
        "messages": [
            {
                "column": 9,
                "line": 28,
                "message": "Unexpected alert.",
                "nodeType": "CallExpression",
                "ruleId": "no-alert",
                "severity": 1,
                "source": "        alert('There was an error logging in');"
            },
            {
                "column": 9,
                "endColumn": 20,
                "endLine": 29,
                "line": 29,
                "message": "Unexpected console statement.",
                "nodeType": "MemberExpression",
                "ruleId": "no-console",
                "severity": 1,
                "source": "        console.log('Error logging in', err);"
            }
        ],
        "warningCount": 2
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/bracket/Bracket.jsx",
        "messages": [
            {
                "column": 16,
                "line": 59,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(Bracket, getGamePlan);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/controls/GameControl.jsx",
        "messages": [
            {
                "column": 16,
                "line": 76,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(GameControl, gameControlStateCallback);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/forms/ConfigureTournamentForm.jsx",
        "messages": [
            {
                "column": 16,
                "line": 372,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(ConfigureTournamentForm, getSettings);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/forms/CreateTournamentForm.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/gameboard/TournamentGameBoard.jsx",
        "messages": [
            {
                "column": 16,
                "line": 128,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(GameBoard, getActiveGame);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/players/ActivePlayerList.jsx",
        "messages": [
            {
                "column": 16,
                "line": 48,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(PlayerList, getActivePlayerList);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/players/FinalPlacementList.jsx",
        "messages": [
            {
                "column": 16,
                "line": 47,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(FinalPlacementList, getFinalPlacement);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/players/PlayerList.jsx",
        "messages": [
            {
                "column": 16,
                "line": 27,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(PlayerList, getPlayerList);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/settings/Settings.jsx",
        "messages": [
            {
                "column": 16,
                "line": 34,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(Settings, getActiveTournament);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/components/TournamentTemplate.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/tournament/watch/StoreWatch.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 3,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/GameBoard.jsx",
        "messages": [
            {
                "column": 43,
                "line": 26,
                "message": "'nextState' is defined but never used.",
                "nodeType": "Identifier",
                "ruleId": "no-unused-vars",
                "severity": 2,
                "source": "  static shouldComponentUpdate(nextProps, nextState) {"
            },
            {
                "column": 28,
                "line": 46,
                "message": "Arrow function should not return assignment.",
                "nodeType": "ArrowFunctionExpression",
                "ruleId": "no-return-assign",
                "severity": 2,
                "source": "                      ref={c => this.canvas = c}"
            },
            {
                "column": 16,
                "line": 117,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(GameBoard, getActiveGame);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 6,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/GameTemplate.jsx",
        "messages": [
            {
                "column": 27,
                "line": 5,
                "message": "Unexpected block statement surrounding arrow body.",
                "nodeType": "ArrowFunctionExpression",
                "ruleId": "arrow-body-style",
                "severity": 2,
                "source": "export default (props) => {"
            },
            {
                "column": 9,
                "line": 7,
                "message": "Expected indentation of 4 space characters but found 8.",
                "nodeType": "JSXOpeningElement",
                "ruleId": "react/jsx-indent",
                "severity": 2,
                "source": "        <div>"
            },
            {
                "column": 13,
                "line": 8,
                "message": "Expected indentation of 10 space characters but found 12.",
                "nodeType": "JSXOpeningElement",
                "ruleId": "react/jsx-indent",
                "severity": 2,
                "source": "            <Header />"
            },
            {
                "column": 13,
                "line": 9,
                "message": "Expected indentation of 10 space characters but found 12.",
                "nodeType": "JSXOpeningElement",
                "ruleId": "react/jsx-indent",
                "severity": 2,
                "source": "            <Grid fluid style={{ paddingTop: '70px' }}>"
            },
            {
                "column": 25,
                "line": 10,
                "message": "Expected indentation of 14 space characters but found 24.",
                "nodeType": "JSXExpressionContainer",
                "ruleId": "react/jsx-indent",
                "severity": 2,
                "source": "                        { props.children }"
            },
            {
                "column": 33,
                "line": 10,
                "message": "'children' is missing in props validation",
                "nodeType": "Identifier",
                "ruleId": "react/prop-types",
                "severity": 2,
                "source": "                        { props.children }"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/header/Header.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/sidebar/GameControl.jsx",
        "messages": [
            {
                "column": 16,
                "line": 93,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(GameControl, gameControlStateCallback);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/sidebar/Sidebar.jsx",
        "messages": [
            {
                "column": 16,
                "line": 46,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(Sidebar, getActiveGame);"
            }
        ],
        "warningCount": 0
    },
    {
        "errorCount": 0,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/components/watch/StoreWatch.jsx",
        "messages": [],
        "warningCount": 0
    },
    {
        "errorCount": 1,
        "filePath": "/Users/mbark/repos/snakebot-webclient/app/training/search/GameSearch.jsx",
        "messages": [
            {
                "column": 16,
                "line": 75,
                "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                "nodeType": "CallExpression",
                "ruleId": "new-cap",
                "severity": 2,
                "source": "export default StoreWatch(GameSearch, getOldGames);"
            }
        ],
        "warningCount": 0
    }
]
